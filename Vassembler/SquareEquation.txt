in
in
in
pop rcx                # ввод элементов
pop rbx
pop rax


push 0
push rax               # проверка на линейное
je line


call sq                # вызов функции для решения уравнения
jmp halt

sq:
    call discr
    push 0
    push rdx
    je discr_null      # проверка на дискримант равный 0.   
    jb no_solve        
    push rdx
    sqrt
    pop rdx

    push 2
    out                # количество решений

    push -1
    push rbx
    mult
    push rdx
    sub                # первый корень 
    push 2
    push rax
    mult
    div
    out

    push -1
    push rbx
    mult
    push rdx
    add                # второй корень
    push 2
    push rax
    mult
    div
    out
ret

line:
    push 0
    push rbx
    je inf_sol
    push -1
    push rcx
    mult
    push rbx
    div

    push 1
    out               # количество решений

    out
    jmp halt
ret

discr:
    push rbx
    push rbx
    mult
    push 4
    push rax
    push rcx
    mult
    mult
    sub
    pop rdx
ret

discr_null:
    push 1
    out                 # количество решений

    push -1
    push rbx
    mult
    push 2
    push rax
    mult
    div
    out
    jmp halt
ret
     
inf_sol:
    push rcx
    push 0
    jne no_solve
    call pr_inf_sol
    jmp halt
ret

no_solve:
    push 0
    out             # количество решений

    push -2         # если нет решений, выводим 2
    out
    jmp halt
ret

pr_inf_sol:
    push -1	        # если решений бесконеное число, выводим -1
    out
    jmp halt
ret

halt:
    hlt